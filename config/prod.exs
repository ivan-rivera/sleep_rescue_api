use Mix.Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#

database_url =
  System.get_env("SR_DATABASE_URL") ||
    raise """
    environment variable DATABASE_URL is missing.
    For example: ecto://USER:PASS@HOST/DATABASE
    """

secret_key_base =
  System.get_env("SECRET_KEY_BASE_SR") ||
    raise """
    environment variable SECRET_KEY_BASE is missing.
    You can generate one by calling: mix phx.gen.secret
    """

# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :sleep_rescue, SleepRescueWeb.Endpoint,
  url: [host: "sleeprescue.org", port: 80],
  cache_static_manifest: "priv/static/cache_manifest.json"

config :sleep_rescue, SleepRescueWeb.Endpoint,
       url: [host: "sleeprescue.org", port: 80],
       cache_static_manifest: "priv/static/cache_manifest.json",
       http: [
         port: String.to_integer(System.get_env("PORT") || "4000"),
         #cipher_suite: :strong,
         #force_ssl: [hsts: true],
         #keyfile: System.get_env("SR_SSL_KEY_PATH"), # TODO: get these
         #certfile: System.get_env("SR_APP_SSL_CERT_PATH"),
         transport_options: [socket_opts: [:inet6]]
       ],
       secret_key_base: secret_key_base

config :sleep_rescue, SleepRescue.Repo,
       # ssl: true,
       url: database_url,
       pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")

config :sleep_rescue, MyApp.Mailer,
       adapter: Bamboo.MailgunAdapter,
       api_key: System.get_env("SR_MAIL_API_KEY"),
       domain: System.get_env("SR_MAIL_DOMAIN"),
       base_uri: "https://api.eu.mailgun.net/v3",
       hackney_opts: [
         recv_timeout: :timer.minutes(1)
       ]

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :sleep_rescue, SleepRescueWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH"),
#         transport_options: [socket_opts: [:inet6]]
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :sleep_rescue, SleepRescueWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.
# import_config "prod.secret.exs"

